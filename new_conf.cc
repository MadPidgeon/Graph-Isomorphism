#include "ext.h"
#include "conf2.h"

int main() {
	matrix<int> M15({	{0,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
						{2,0,2,2,2,2,2,2,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1},
						{2,2,0,1,2,2,2,1,2,2,1,1,1,1,2,1,2,1,2,1,2,2,1,1,1,1,1,1},
						{2,2,1,0,2,2,1,2,1,1,2,2,1,2,1,2,1,1,1,2,1,1,2,2,1,1,1,1},
						{2,2,2,2,0,2,1,1,1,1,2,2,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1},
						{2,2,2,2,2,0,1,1,1,2,1,2,1,1,1,2,2,1,1,1,1,2,1,2,1,1,1,2},
						{2,2,2,1,1,1,0,2,2,2,1,1,2,2,2,1,1,2,2,1,1,1,1,1,1,2,1,1},
						{2,2,1,2,1,1,2,0,2,1,2,1,2,2,1,2,1,2,1,2,1,1,1,1,2,1,1,1},
						{2,1,2,1,1,1,2,2,0,2,2,1,2,1,1,1,1,1,2,2,2,2,1,1,2,1,1,1},
						{2,1,2,1,1,2,2,1,2,0,1,2,2,1,1,1,1,1,2,1,1,2,1,2,1,2,1,2},
						{2,1,1,2,2,1,1,2,2,1,0,2,2,1,1,1,1,1,1,2,2,1,2,1,2,1,2,1},
						{2,1,1,2,2,2,1,1,1,2,2,0,2,1,1,1,1,1,1,1,1,1,2,2,1,2,2,2},
						{2,1,1,1,1,1,2,2,2,2,2,2,0,1,1,1,1,2,1,1,1,1,1,1,2,2,2,2},
						{1,2,1,2,1,1,2,2,1,1,1,1,1,0,2,2,1,2,2,2,1,1,2,2,1,2,1,1},
						{1,2,2,1,2,1,2,1,1,1,1,1,1,2,0,1,2,2,2,1,2,1,2,1,1,2,2,1},
						{1,2,1,2,1,2,1,2,1,1,1,1,1,2,1,0,2,2,1,2,1,2,1,2,2,1,1,2},
						{1,2,2,1,2,2,1,1,1,1,1,1,1,1,2,2,0,2,1,1,2,2,1,1,2,1,2,2},
						{1,2,1,1,1,1,2,2,1,1,1,1,2,2,2,2,2,0,1,1,1,1,1,1,2,2,2,2},
						{1,1,2,1,1,1,2,1,2,2,1,1,1,2,2,1,1,1,0,2,2,2,2,2,1,2,1,1},
						{1,1,1,2,1,1,1,2,2,1,2,1,1,2,1,2,1,1,2,0,2,2,2,2,2,1,1,1},
						{1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,2,2,0,2,2,1,2,1,2,1},
						{1,1,2,1,1,2,1,1,2,2,1,1,1,1,1,2,2,1,2,2,2,0,1,2,2,1,1,2},
						{1,1,1,2,2,1,1,1,1,1,2,2,1,2,2,1,1,1,2,2,2,1,0,2,1,2,2,1},
						{1,1,1,2,1,2,1,1,1,2,1,2,1,2,1,2,1,1,2,2,1,2,2,0,1,2,1,2},
						{1,1,1,1,1,1,1,2,2,1,2,1,2,1,1,2,2,2,1,2,2,2,1,1,0,1,2,2},
						{1,1,1,1,1,1,2,1,1,2,1,2,2,2,2,1,1,2,2,1,1,1,2,2,1,0,2,2},
						{1,1,1,1,2,1,1,1,1,1,2,2,2,1,2,1,2,2,1,1,2,1,2,1,2,2,0,2},
						{1,1,1,1,1,2,1,1,1,2,1,2,2,1,1,2,2,2,1,1,1,2,1,2,2,2,2,0}});
	std::deque<int> C( 28 );
	std::iota( C.begin(), C.end(), 0 );
	std::vector<int> r(28*28);
	for( auto t : all_tuples( 28, 2 ) )
		r[polynomial_evaluation( t, 28 )] = M15.at( t[0], t[1] );
	RelationalStructure conf15( std::move( C ), std::move( r ), 2 );
	conf15.individualise(std::deque<int>({0}));
	conf15.refine();
	std::cout << conf15 << std::endl;
}